import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by the Firebase CLI setup.
import 'package:firebase_messaging/firebase_messaging.dart';

import 'pages/appliances_overview_page.dart';
import 'pages/light_control_page.dart';
import 'pages/temperature_control_page.dart';
import 'pages/cctv_page.dart';
import 'pages/fan_control_page.dart';

/// Top-level function to handle background messages.
/// Make sure to annotate it with `@pragma('vm:entry-point')` if needed.
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Initialize Firebase in case it's not already initialized.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  print("Handling a background message: ${message.messageId}");
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Set the background messaging handler early on, as a named top-level function.
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String? _fcmToken;

  @override
  void initState() {
    super.initState();
    _setupFCM();
  }

  Future<void> _setupFCM() async {
    FirebaseMessaging messaging = FirebaseMessaging.instance;

    // Request permission (especially required on iOS)
    NotificationSettings settings = await messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );
    print('User granted permission: ${settings.authorizationStatus}');

    // Get the FCM token for this device.
    String? token = await messaging.getToken();
    setState(() {
      _fcmToken = token;
    });
    print("FCM Token: $token");

    // Subscribe the device to a topic, so that it can receive topic-based notifications.
    await messaging.subscribeToTopic("personDetectionAlerts");
    print("Subscribed to topic 'personDetectionAlerts'");

    // Listen for foreground messages.
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("Received a foreground message: ${message.messageId}");
      if (message.notification != null) {
        print("Message also contained a notification: ${message.notification}");
        // Optionally, you can show a local notification here.
      }
    });

    // Optionally, you can also listen for messages when the app is opened from a terminated state.
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("Message clicked!: ${message.messageId}");
      // Navigate to a specific page if needed.
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Smart Home Control',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      initialRoute: '/',
      routes: {
        '/': (context) => AppliancesOverviewPage(),
        '/lightControl': (context) => LightControlPage(),
        '/temperatureControl': (context) => TemperatureControlPage(),
        '/cctv': (context) => CCTVPage(),
        '/fanControl': (context) => FanControlPage(),
      },
    );
  }
}
